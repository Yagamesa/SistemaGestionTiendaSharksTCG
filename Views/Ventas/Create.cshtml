@model ProyectoMDGSharksWeb.Models.Venta
@{
    ViewBag.Title = "Registrar Venta";
    var idUsuario = ViewBag.IdUsuario;
}

<!-- Estilos -->
<style>
    h1 {
        font-weight: bold;
        color: #001f3f;
    }

    label {
        font-weight: 600;
        margin-top: 10px;
    }

    input[type="text"], input[type="number"], select {
        width: 100%;
        padding: 10px;
        margin: 5px 0 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-submit, .btn-cancelar {
        padding: 10px 20px;
        margin-top: 10px;
        font-weight: bold;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn-submit {
        background-color: #00bfff;
        color: white;
    }

        .btn-submit:hover {
            background-color: #005f99;
        }

    .btn-cancelar {
        background-color: crimson;
        color: white;
    }

        .btn-cancelar:hover {
            background-color: darkred;
        }

    .btn-crear-cliente {
        display: inline-block;
        background-color: #28a745;
        color: white;
        padding: 10px 18px;
        margin-top: 10px;
        border: none;
        border-radius: 5px;
        text-decoration: none;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }

        .btn-crear-cliente:hover {
            background-color: #1e7e34;
        }

    #clienteList, #productoList {
        border: 1px solid #ccc;
        max-height: 150px;
        overflow-y: auto;
        position: absolute;
        background-color: white;
        width: 100%;
        z-index: 1000;
        display: none;
    }

        #clienteList div, #productoList div {
            padding: 8px;
            cursor: pointer;
        }

            #clienteList div:hover, #productoList div:hover {
                background-color: #00bfff;
                color: white;
            }

    .input-wrapper {
        position: relative;
        max-width: 400px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        table-layout: fixed;
    }

    th, td {
        padding: 12px;
        border-bottom: 1px solid #ddd;
        text-align: left;
        word-wrap: break-word;
    }

    th {
        background-color: #0B3D91;
        color: white;
    }

    tr:hover {
        background-color: #00bfff;
        color: #0B3D91;
    }

    .acciones button {
        background: none;
        border: none;
        color: crimson;
        font-weight: bold;
        cursor: pointer;
    }

        .acciones button:hover {
            text-decoration: underline;
        }
</style>

<h1>Registrar Nueva Venta</h1>

<form asp-action="GuardarVenta" method="post">
    @Html.AntiForgeryToken()
    <input type="hidden" name="IdUsuario" value="@idUsuario" />

    <div class="input-wrapper">
        <label>Buscar Cliente</label>
        <input type="hidden" id="IdCliente" name="IdCliente" />
        <input type="text" id="clienteInput" placeholder="Nombre completo..." autocomplete="off" />
        <div id="clienteList"></div>
    </div>
    <a href="/Clientes/Create" target="_blank" class="btn-crear-cliente">+ Crear cliente nuevo</a>

    <hr />

    <h2>Agregar Productos</h2>
    <div class="input-wrapper">
        <label>Buscar Producto</label>
        <input type="hidden" id="IdProducto" />
        <input type="text" id="productoInput" placeholder="Nombre del producto..." autocomplete="off" />
        <div id="productoList"></div>
    </div>
    <div>
        <label>Cantidad</label>
        <input type="number" id="Cantidad" step="1" min="1" />
    </div>
    <div>
        <label>Precio Unitario (Bs)</label>
        <input type="number" id="PrecioUnitario" step="0.01" min="0" />
    </div>
    <div>
        <label>Tipo de Pago</label>
        <select id="TipoPago">
            <option value="Efectivo">Efectivo</option>
            <option value="QR">QR</option>
            <option value="Transferencia">Transferencia</option>
            <option value="Tarjeta">Tarjeta</option>
        </select>
    </div>
    <button type="button" class="btn-submit" onclick="agregarProducto()">Agregar Producto</button>

    <h2>Productos Seleccionados</h2>
    <table>
        <thead>
            <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Total</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody id="tablaProductos"></tbody>
    </table>

    <hr />

    <h2>Resumen de Pago</h2>
    <div>
        <label>Total Bruto (Bs):</label>
        <input type="text" id="totalBruto" readonly value="0.00" />
    </div>
    <div>
        <label>Descuento (Bs):</label>
        <input type="number" step="0.01" min="0" name="descuento" id="descuento" placeholder="Bs" />
    </div>
    <div>
        <label>Total Final (Bs):</label>
        <input type="text" id="totalFinal" readonly />
    </div>
    <div>
        <label>Pago (Bs):</label>
        <input type="number" step="0.01" min="0" name="pago" id="pago" placeholder="Bs" />
    </div>
    <div>
        <label>Deuda (Bs):</label>
        <input type="text" id="deuda" readonly />
    </div>

    <button type="submit" class="btn-submit">Guardar Venta</button>
    <button type="button" class="btn-cancelar" onclick="cancelarVenta()">Cancelar</button>
</form>

@section Scripts {
    <script>
        const clienteInput = document.getElementById('clienteInput');
        const clienteList = document.getElementById('clienteList');
        const idCliente = document.getElementById('IdCliente');
        const productoInput = document.getElementById('productoInput');
        const productoList = document.getElementById('productoList');
        const idProducto = document.getElementById('IdProducto');

        const descuentoInput = document.getElementById('descuento');
        const pagoInput = document.getElementById('pago');
        const totalBrutoInput = document.getElementById('totalBruto');
        const totalFinalInput = document.getElementById('totalFinal');
        const deudaInput = document.getElementById('deuda');

        clienteInput.addEventListener('input', () => {
            const term = clienteInput.value.trim();
            idCliente.value = '';
            if (term.length > 1) buscarClientes(term);
            else clienteList.style.display = 'none';
        });

        async function buscarClientes(term) {
            const resp = await fetch('/Ventas/BuscarClientes?term=' + encodeURIComponent(term));
            const data = await resp.json();
            clienteList.innerHTML = '';
            data.forEach(c => {
                const div = document.createElement('div');
                div.textContent = c.nombreCompleto;
                div.dataset.id = c.id;
                div.onclick = () => {
                    clienteInput.value = div.textContent;
                    idCliente.value = div.dataset.id;
                    clienteList.style.display = 'none';
                };
                clienteList.appendChild(div);
            });
            clienteList.style.display = 'block';
        }

        productoInput.addEventListener('input', () => {
            const term = productoInput.value.trim();
            idProducto.value = '';
            if (term.length > 1) buscarProductos(term);
            else productoList.style.display = 'none';
        });

        async function buscarProductos(term) {
            const resp = await fetch('/Ventas/BuscarProductos?term=' + encodeURIComponent(term));
            const data = await resp.json();
            productoList.innerHTML = '';
            data.forEach(p => {
                const div = document.createElement('div');
                div.textContent = p.nombre;
                div.dataset.id = p.id;
                div.dataset.precio = p.precio;
                div.onclick = () => {
                    productoInput.value = div.textContent;
                    idProducto.value = div.dataset.id;
                    document.getElementById('PrecioUnitario').value = div.dataset.precio;
                    productoList.style.display = 'none';
                };
                productoList.appendChild(div);
            });
            productoList.style.display = 'block';
        }

        function agregarProducto() {
            const dto = {
                IdProducto: parseInt(idProducto.value),
                Cantidad: parseInt(document.getElementById('Cantidad').value),
                PrecioUnitario: parseFloat(document.getElementById('PrecioUnitario').value),
                TipoPago: document.getElementById('TipoPago').value
            };

            if (!dto.IdProducto || isNaN(dto.Cantidad) || dto.Cantidad < 1) {
                alert("Debe seleccionar un producto válido con cantidad mayor a 0");
                return;
            }

            fetch('/Ventas/AgregarProducto', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dto)
            }).then(() => {
                limpiarProducto();
                cargarTabla();
            });
        }

        function cargarTabla() {
            fetch('/Ventas/ObtenerProductos')
                .then(resp => resp.json())
                .then(data => {
                    const tabla = document.getElementById('tablaProductos');
                    tabla.innerHTML = '';
                    let totalBruto = 0;
                    data.forEach(p => {
                        const totalProducto = p.cantidad * p.precioUnitario;
                        totalBruto += totalProducto;
                        tabla.innerHTML += `
                            <tr>
                                <td>${p.productoNombre}</td>
                                <td>${p.cantidad}</td>
                                <td>${p.precioUnitario.toFixed(2)}</td>
                                <td>${totalProducto.toFixed(2)}</td>
                                <td class='acciones'><button type="button" onclick="eliminarProducto(${p.idProducto})">Eliminar</button></td>
                            </tr>`;
                    });
                    totalBrutoInput.value = totalBruto.toFixed(2);
                    actualizarTotales();
                });
        }

        function eliminarProducto(idProducto) {
            fetch('/Ventas/EliminarProducto', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(idProducto)
            })
            .then(() => cargarTabla());
        }

        function cancelarVenta() {
            if (!confirm("¿Cancelar la venta actual?")) return;
            fetch('/Ventas/CancelarVenta', { method: 'POST' })
                .then(() => window.location.href = '/Ventas/Create');
        }

        function limpiarProducto() {
            productoInput.value = '';
            idProducto.value = '';
            document.getElementById('Cantidad').value = '';
            document.getElementById('PrecioUnitario').value = '';
            document.getElementById('TipoPago').selectedIndex = 0;
        }

        function actualizarTotales() {
            let totalBruto = parseFloat(totalBrutoInput.value) || 0;
            let descuento = parseFloat(descuentoInput.value) || 0;
            if (descuento > totalBruto) descuento = totalBruto;
            let totalFinal = totalBruto - descuento;
            let pago = parseFloat(pagoInput.value) || 0;
            if (pago > totalFinal) pago = totalFinal;
            let deuda = totalFinal - pago;
            if (deuda < 0) deuda = 0;

            totalFinalInput.value = totalFinal.toFixed(2);
            deudaInput.value = deuda.toFixed(2);
            // No cambiar los valores de descuento y pago aquí para permitir edición libre
        }

        descuentoInput.addEventListener('input', actualizarTotales);
        pagoInput.addEventListener('input', actualizarTotales);

        // Formatear a 2 decimales al salir del campo
        descuentoInput.addEventListener('blur', () => {
            let val = parseFloat(descuentoInput.value) || 0;
            descuentoInput.value = val.toFixed(2);
            actualizarTotales();
        });
        pagoInput.addEventListener('blur', () => {
            let val = parseFloat(pagoInput.value) || 0;
            pagoInput.value = val.toFixed(2);
            actualizarTotales();
        });

        // Inicializar tabla y totales al cargar página
        cargarTabla();
    </script>
}
